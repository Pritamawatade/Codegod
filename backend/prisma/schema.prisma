// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum Difficult {
  EASY
  MEDIUM
  HARD
}

model User {
  id        String   @id @default(uuid())
  name      String?
  email     String   @unique
  image     String?
  role      UserRole @default(USER)
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  problems   Problem[]
  submission Submission[]
}

model Problem {
  id          String    @id @default(uuid())
  title       String
  description String
  difficulty  Difficult
  tags        String[] // array of tags like what type of questions
  constraints  String
  userId      String
  examples    Json
  hints       String?
  editorial   String?

  testCases         Json
  codeSnippets       Json
  referenceSolutions Json

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // relation :- it's foreign key
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  submission Submission[]
}

model Submission {
  id            String   @id @default(uuid())
  userId        String
  problemId     String
  sourceCode    Json
  language      String
  stdin         String?
  stdout        String?
  stderr        String?
  compileOutput String?
  status        String
  memory        String
  time          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())

  Problem Problem @relation(fields: [problemId], references: [id])
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  testcaseresult TestCaseResult[]
}

model TestCaseResult {
  id            String  @id @default(uuid())
  submissionId  String
  testCase      Int
  passed        Boolean
  stdout        String?
  expected      String
  stderr        String
  compileOutput String?
  status        String
  memory        String
  time          String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  submission Submission @relation(fields:[submissionId], references: [id])
}
